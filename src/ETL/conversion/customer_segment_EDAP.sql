------------------------------------------------------------------
-- get sales data from EDAP for all time
DROP TABLE IF EXISTS mix_media_marketing.conversion_edap_test_all;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.conversion_edap_test_all AS
WITH tmp AS (
SELECT DP.DIM_PARTY_NATURAL_KEY_HASH_UUID
	, DA.DIM_AGREEMENT_NATURAL_KEY_HASH_UUID
	, DA.AGREEMENT_NR
	, DA.agreement_source_cde
	, DA.AGREEMENT_STATUS_CDE
	, DA.FACE_AMT
	, DA.ISSUE_DT
	, RPR.PARTY_ROLE_DESC
	, DPRO.line_of_business_cde AS LOB
	, split_part(DPRO.major_product_type_cde, '&&', 2) AS PRODUCT
FROM EDW_cip_VW.REL_PARTY_AGREEMENT_VW RPA
INNER JOIN EDW_cip_VW.PARTY_MASTER_OF_MASTERS_XREF_VW XREF
	ON RPA.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PRIOR_PARTY_NATURAL_KEY_HASH_UUID
	AND RPA.CURRENT_ROW_IND = TRUE AND RPA.LOGICAL_DELETE_IND = FALSE
	AND XREF.CURRENT_ROW_IND = TRUE AND XREF.LOGICAL_DELETE_IND = FALSE AND XREF.PARTY_ID_TYPE_CDE = 'Mstr_prty_id'
INNER JOIN EDW_cip_VW.DIM_PARTY_VW DP
	ON DP.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PARTY_NATURAL_KEY_HASH_UUID
	AND DP.CURRENT_ROW_IND = TRUE AND DP.LOGICAL_DELETE_IND = FALSE
INNER JOIN EDW_cip_VW.DIM_AGREEMENT_VW DA
	ON DA.DIM_AGREEMENT_NATURAL_KEY_HASH_UUID = RPA.DIM_AGREEMENT_NATURAL_KEY_HASH_UUID
	AND DA.CURRENT_ROW_IND = TRUE AND DA.LOGICAL_DELETE_IND = FALSE
INNER JOIN EDW_cip_VW.REF_PARTY_ROLE_VW RPR
	ON RPR.REF_PARTY_ROLE_NATURAL_KEY_HASH_UUID = RPA.REF_PARTY_ROLE_NATURAL_KEY_HASH_UUID
	AND RPR.CURRENT_ROW_IND = TRUE AND RPR.LOGICAL_DELETE_IND = FALSE
INNER JOIN edw_cip_vw.dim_product_vw DPRO
	ON RPA.dim_product_natural_key_hash_uuid = DPRO.dim_product_natural_key_hash_uuid
	AND RPR.CURRENT_ROW_IND = TRUE AND RPR.LOGICAL_DELETE_IND = FALSE
WHERE DA.AGREEMENT_STATUS_CDE IN ('If', 'Tm', 'IF', 'TM')
AND RPR.PARTY_ROLE_DESC = 'Owner'
GROUP BY 1,2,3,4,5,6,7,8,9,10
),
address AS (
SELECT  a.DIM_AGREEMENT_NATURAL_KEY_HASH_UUID
	, a.AGREEMENT_NR
	, a.agreement_source_cde
	, a.DIM_PARTY_NATURAL_KEY_HASH_UUID
	, a.FACE_AMT
	, a.ISSUE_DT
	, a.PARTY_ROLE_DESC
	, a.LOB
	, a.PRODUCT
	, DADR.STATE_CDE
	, RPCS.PARTY_CONTACT_SOURCE_CDE
	, RAT.ADDRESS_TYPE_CDE
FROM tmp a
INNER JOIN EDW_cip_VW.PARTY_MASTER_OF_MASTERS_XREF_VW XREF
	ON a.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PRIOR_PARTY_NATURAL_KEY_HASH_UUID
	AND XREF.CURRENT_ROW_IND = TRUE AND XREF.LOGICAL_DELETE_IND = FALSE AND XREF.PARTY_ID_TYPE_CDE = 'Mstr_prty_id'
LEFT JOIN EDW_cip_VW.REL_PARTY_ADDRESS_VW RPADR
	ON RPADR.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PRIOR_PARTY_NATURAL_KEY_HASH_UUID
	AND RPADR.CURRENT_ROW_IND = TRUE AND RPADR.LOGICAL_DELETE_IND = FALSE
INNER JOIN EDW_cip_VW.dim_party_VW DP
	ON DP.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PARTY_NATURAL_KEY_HASH_UUID
	AND DP.CURRENT_ROW_IND = TRUE AND DP.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.DIM_ADDRESS_VW DADR
	ON DADR.DIM_ADDRESS_NATURAL_KEY_HASH_UUID = RPADR.DIM_ADDRESS_NATURAL_KEY_HASH_UUID
	AND DADR.CURRENT_ROW_IND = TRUE AND DADR.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.REF_PARTY_CONTACT_SOURCE_VW RPCS
	ON RPCS.REF_PARTY_CONTACT_SOURCE_NATURAL_KEY_HASH_UUID = RPADR.REF_PARTY_CONTACT_SOURCE_NATURAL_KEY_HASH_UUID
	AND RPCS.CURRENT_ROW_IND = TRUE AND RPCS.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.REF_ADDRESS_TYPE_VW RAT
	ON RAT.REF_ADDRESS_TYPE_NATURAL_KEY_HASH_UUID = RPADR.REF_ADDRESS_TYPE_NATURAL_KEY_HASH_UUID
	AND RAT.CURRENT_ROW_IND = TRUE AND RAT.LOGICAL_DELETE_IND = FALSE
WHERE  DADR.STATE_CDE IS NOT NULL
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
),
rnk AS (
SELECT AGREEMENT_NR, agreement_source_cde, DIM_PARTY_NATURAL_KEY_HASH_UUID, FACE_AMT, ISSUE_DT, PARTY_ROLE_DESC,
LOB, PRODUCT, STATE_CDE, PARTY_CONTACT_SOURCE_CDE, ADDRESS_TYPE_CDE,
DENSE_RANK() OVER(PARTITION BY AGREEMENT_NR, agreement_source_cde ORDER BY ISSUE_DT) AS policy_rnk
FROM address
)
SELECT * FROM rnk WHERE policy_rnk = 1

-----------------------------------------------------------
-- policy status New/Old based on the customer associated with it
DROP TABLE IF EXISTS mix_media_marketing.policy_segment;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.policy_segment AS
WITH tmp AS (
SELECT AGREEMENT_NR, agreement_source_cde, DIM_PARTY_NATURAL_KEY_HASH_UUID, ISSUE_DT
FROM mix_media_marketing.conversion_edap_test_all
WHERE issue_dt > '1923-01-01'
GROUP BY 1,2,3,4
),
rnk AS (
SELECT AGREEMENT_NR, agreement_source_cde, DIM_PARTY_NATURAL_KEY_HASH_UUID, ISSUE_DT,
DENSE_RANK() OVER(PARTITION BY DIM_PARTY_NATURAL_KEY_HASH_UUID ORDER BY ISSUE_DT) AS policy_rnk
FROM tmp
),
agg AS (
SELECT AGREEMENT_NR, agreement_source_cde, sum(segment) AS seg_sum
FROM (SELECT *,CASE WHEN policy_rnk = 1 THEN 0 ELSE 1 END AS segment FROM rnk) a -- 0 for new cus, 1 for old cus
GROUP BY 1,2
)
SELECT AGREEMENT_NR, agreement_source_cde,
CASE WHEN seg_sum = 0 THEN 'New' ELSE 'Old' END AS segment
FROM agg

-----------------------------------------------------------
-- conversion data with segment
DROP TABLE IF EXISTS mix_media_marketing.conversion_edap_all_seg;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.conversion_edap_all_seg AS
WITH tmp AS (
SELECT a.*, b.segment
FROM mix_media_marketing.conversion_edap_all a
LEFT JOIN mix_media_marketing.policy_segment b
ON a.AGREEMENT_NR = b.AGREEMENT_NR 
AND a.agreement_source_cde = b.agreement_source_cde
)
SELECT * FROM tmp
