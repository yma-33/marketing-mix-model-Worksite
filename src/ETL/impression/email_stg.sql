------------------------------------------------------------------
-- SFMC as source
-- Email
DROP TABLE IF EXISTS mix_media_marketing.impression_email_sent_raw;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.impression_email_sent_raw AS
WITH sent AS (
SELECT FACT.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID,
FACT.EVENT_DTM::DATE AS impression_date
, DC.campaign_id
, DC.campaign_nm
, DADR.STATE_CDE
, RPCS.PARTY_CONTACT_SOURCE_CDE
, RAT.ADDRESS_TYPE_CDE
, ATTR.send_id
, ATTR.sub_id
, ATTR.list_id
, ATTR.batch_id
FROM EDW_CIP_VW.FACT_PARTY_EVENT_VW FACT
JOIN EDW_CIP_VW.PARTY_MASTER_OF_MASTERS_XREF_VW XREF
	ON FACT.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PRIOR_PARTY_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.DIM_PARTY_VW DP
	ON DP.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PARTY_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.REF_EVENT_SOURCE_VW RES
	ON FACT.REF_EVENT_SOURCE_NATURAL_KEY_HASH_UUID = RES.REF_EVENT_SOURCE_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.REF_EVENT_TYPE_VW RET
	ON FACT.REF_EVENT_TYPE_NATURAL_KEY_HASH_UUID = RET.REF_EVENT_TYPE_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.ATTR_EMAIL_COMMUNICATION_EVENT_VW ATTR
	ON FACT.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID = ATTR.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID
LEFT OUTER JOIN (SELECT * FROM EDW_CIP_VW.DIM_CAMPAIGN_VW WHERE campaign_line_of_business_cde = 'Mmfa') DC
	ON ATTR.DIM_CAMPAIGN_NATURAL_KEY_HASH_UUID = DC.DIM_CAMPAIGN_NATURAL_KEY_HASH_UUID
LEFT JOIN EDW_cip_VW.REL_PARTY_ADDRESS_VW RPADR
	ON RPADR.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PRIOR_PARTY_NATURAL_KEY_HASH_UUID
	AND RPADR.CURRENT_ROW_IND = TRUE AND RPADR.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.DIM_ADDRESS_VW DADR
	ON DADR.DIM_ADDRESS_NATURAL_KEY_HASH_UUID = RPADR.DIM_ADDRESS_NATURAL_KEY_HASH_UUID
	AND DADR.CURRENT_ROW_IND = TRUE AND DADR.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.REF_PARTY_CONTACT_SOURCE_VW RPCS
	ON RPCS.REF_PARTY_CONTACT_SOURCE_NATURAL_KEY_HASH_UUID = RPADR.REF_PARTY_CONTACT_SOURCE_NATURAL_KEY_HASH_UUID
	AND RPCS.CURRENT_ROW_IND = TRUE AND RPCS.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.REF_ADDRESS_TYPE_VW RAT
	ON RAT.REF_ADDRESS_TYPE_NATURAL_KEY_HASH_UUID = RPADR.REF_ADDRESS_TYPE_NATURAL_KEY_HASH_UUID
	AND RAT.CURRENT_ROW_IND = TRUE AND RAT.LOGICAL_DELETE_IND = FALSE
WHERE
FACT.CURRENT_ROW_IND = TRUE AND FACT.LOGICAL_DELETE_IND = FALSE AND FACT.EVENT_DTM::DATE BETWEEN '2017-10-01' AND '2020-12-31'
AND XREF.CURRENT_ROW_IND = TRUE AND XREF.LOGICAL_DELETE_IND = FALSE AND XREF.PARTY_ID_TYPE_CDE = 'Mstr_prty_id'
AND DP.CURRENT_ROW_IND = TRUE AND DP.LOGICAL_DELETE_IND = FALSE
AND RES.CURRENT_ROW_IND = TRUE AND RES.LOGICAL_DELETE_IND = FALSE AND RES.EVENT_SOURCE_CDE = 'Sfmc'
AND RET.CURRENT_ROW_IND = TRUE AND RET.LOGICAL_DELETE_IND = FALSE AND RET.EVENT_GROUP_CDE = 'Mktcommn' AND RET.EVENT_CATEGORY_CDE = 'Emailcommn' AND RET.EVENT_TYPE_CDE = 'Sent'
AND ATTR.CURRENT_ROW_IND = TRUE AND ATTR.LOGICAL_DELETE_IND = FALSE
AND DC.CURRENT_ROW_IND = TRUE AND DC.LOGICAL_DELETE_IND = FALSE
AND DADR.STATE_CDE IS NOT NULL
GROUP BY 1,2,3,4,5,6,7,8,9,10,11
)
SELECT * FROM sent

DROP TABLE IF EXISTS mix_media_marketing.impression_email_raw;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.impression_email_raw AS
WITH hard_bounce AS (
SELECT FACT.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID,
FACT.EVENT_DTM::DATE AS impression_date
, DC.campaign_id
, DC.campaign_nm
, DADR.STATE_CDE
, RPCS.PARTY_CONTACT_SOURCE_CDE
, RAT.ADDRESS_TYPE_CDE
, ATTR.send_id
, ATTR.sub_id
, ATTR.list_id
, ATTR.batch_id
, CASE WHEN ((RET.EVENT_TYPE_CDE = 'Bounce'::varchar(6)) AND (ATTR.bounce_category_desc = ANY (ARRAY['Hard Bounce'::varchar(12), 'Block Bounce'::varchar(12)])))
  THEN 1 ELSE 0 END AS Email_Hard_Bounces
FROM EDW_CIP_VW.FACT_PARTY_EVENT_VW FACT
JOIN EDW_CIP_VW.PARTY_MASTER_OF_MASTERS_XREF_VW XREF
	ON FACT.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PRIOR_PARTY_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.DIM_PARTY_VW DP
	ON DP.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PARTY_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.REF_EVENT_SOURCE_VW RES
	ON FACT.REF_EVENT_SOURCE_NATURAL_KEY_HASH_UUID = RES.REF_EVENT_SOURCE_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.REF_EVENT_TYPE_VW RET
	ON FACT.REF_EVENT_TYPE_NATURAL_KEY_HASH_UUID = RET.REF_EVENT_TYPE_NATURAL_KEY_HASH_UUID
JOIN EDW_CIP_VW.ATTR_EMAIL_COMMUNICATION_EVENT_VW ATTR
	ON FACT.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID = ATTR.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID
LEFT OUTER JOIN (SELECT * FROM EDW_CIP_VW.DIM_CAMPAIGN_VW WHERE campaign_line_of_business_cde = 'Mmfa') DC
	ON ATTR.DIM_CAMPAIGN_NATURAL_KEY_HASH_UUID = DC.DIM_CAMPAIGN_NATURAL_KEY_HASH_UUID
LEFT JOIN EDW_cip_VW.REL_PARTY_ADDRESS_VW RPADR
	ON RPADR.DIM_PARTY_NATURAL_KEY_HASH_UUID = XREF.DIM_PRIOR_PARTY_NATURAL_KEY_HASH_UUID
	AND RPADR.CURRENT_ROW_IND = TRUE AND RPADR.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.DIM_ADDRESS_VW DADR
	ON DADR.DIM_ADDRESS_NATURAL_KEY_HASH_UUID = RPADR.DIM_ADDRESS_NATURAL_KEY_HASH_UUID
	AND DADR.CURRENT_ROW_IND = TRUE AND DADR.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.REF_PARTY_CONTACT_SOURCE_VW RPCS
	ON RPCS.REF_PARTY_CONTACT_SOURCE_NATURAL_KEY_HASH_UUID = RPADR.REF_PARTY_CONTACT_SOURCE_NATURAL_KEY_HASH_UUID
	AND RPCS.CURRENT_ROW_IND = TRUE AND RPCS.LOGICAL_DELETE_IND = FALSE
LEFT JOIN EDW_cip_VW.REF_ADDRESS_TYPE_VW RAT
	ON RAT.REF_ADDRESS_TYPE_NATURAL_KEY_HASH_UUID = RPADR.REF_ADDRESS_TYPE_NATURAL_KEY_HASH_UUID
	AND RAT.CURRENT_ROW_IND = TRUE AND RAT.LOGICAL_DELETE_IND = FALSE
WHERE
FACT.CURRENT_ROW_IND = TRUE AND FACT.LOGICAL_DELETE_IND = FALSE AND FACT.EVENT_DTM::DATE BETWEEN '2017-10-01' AND '2020-12-31'
AND XREF.CURRENT_ROW_IND = TRUE AND XREF.LOGICAL_DELETE_IND = FALSE AND XREF.PARTY_ID_TYPE_CDE = 'Mstr_prty_id'
AND DP.CURRENT_ROW_IND = TRUE AND DP.LOGICAL_DELETE_IND = FALSE
AND RES.CURRENT_ROW_IND = TRUE AND RES.LOGICAL_DELETE_IND = FALSE AND RES.EVENT_SOURCE_CDE = 'Sfmc'
AND RET.CURRENT_ROW_IND = TRUE AND RET.LOGICAL_DELETE_IND = FALSE AND RET.EVENT_GROUP_CDE = 'Mktcommn' AND RET.EVENT_CATEGORY_CDE = 'Emailcommn' --AND RET.EVENT_TYPE_CDE = 'Sent'
AND ATTR.CURRENT_ROW_IND = TRUE AND ATTR.LOGICAL_DELETE_IND = FALSE
AND DC.CURRENT_ROW_IND = TRUE AND DC.LOGICAL_DELETE_IND = FALSE
AND DADR.STATE_CDE IS NOT NULL
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
),
joined AS (
SELECT a.*, b.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID AS fact_id_bounce
FROM mix_media_marketing.impression_email_sent_raw a
LEFT JOIN (SELECT * FROM hard_bounce
WHERE Email_Hard_Bounces = 1) b
ON a.send_id = b.send_id
AND a.sub_id = b.sub_id
AND a.list_id = b.list_id
AND a.batch_id = b.batch_id
)
SELECT * FROM joined
WHERE fact_id_bounce IS NULL

------------------------------------------------------------------------
-- best practice
DROP TABLE IF EXISTS mix_media_marketing.impression_email_best;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.impression_email_best AS
WITH tmp AS (
SELECT a.*,
DENSE_RANK() over(PARTITION BY FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID ORDER BY STATE_CDE) AS rnk
FROM mix_media_marketing.impression_email_raw a
WHERE PARTY_CONTACT_SOURCE_CDE = 'Ecdm'
AND ADDRESS_TYPE_CDE = 'Best' -- best practice to ensure no duplicate in address
)
SELECT * FROM tmp WHERE rnk = 1

------------------------------------------------------------------------
-- none best practice single state per agreement
DROP TABLE IF EXISTS mix_media_marketing.impression_email_no_best;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.impression_email_no_best AS
WITH best AS (
SELECT FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID
FROM mix_media_marketing.impression_email_raw
WHERE ADDRESS_TYPE_CDE = 'Best'
AND PARTY_CONTACT_SOURCE_CDE = 'Ecdm'
GROUP BY 1
),
tmp AS (
SELECT
a.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID, a.impression_date, a.campaign_id, a.campaign_nm, a.STATE_CDE
--,a.PARTY_CONTACT_SOURCE_CDE, ADDRESS_TYPE_CDE,
,b.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID AS best_agree
FROM mix_media_marketing.impression_email_raw a
LEFT JOIN best b
ON a.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID = b.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID
GROUP BY 1,2,3,4,5,6
),
tmp2 AS (
SELECT FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID, count(*) AS cnt
FROM tmp
WHERE best_agree IS NULL
GROUP BY 1
),
tmp3 AS (
SELECT a.*
FROM (SELECT * FROM tmp WHERE best_agree IS NULL) a
INNER JOIN (SELECT FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID FROM tmp2
WHERE cnt = 1) b
ON a.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID = b.FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID
)
SELECT * FROM tmp3

-- combine events from both best practice and none best
DROP TABLE IF EXISTS mix_media_marketing.impression_email_all;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.impression_email_all AS
SELECT FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID,
impression_date, campaign_id, campaign_nm, STATE_CDE, 'Best' AS source
FROM mix_media_marketing.impression_email_best
UNION ALL
(SELECT FACT_PARTY_EVENT_NATURAL_KEY_HASH_UUID,
impression_date, campaign_id, campaign_nm, STATE_CDE, 'No_best' AS source
FROM mix_media_marketing.impression_email_no_best)

------------------------------------------------------------------
-- SF as source
DROP TABLE IF EXISTS mix_media_marketing.impression_email_dmail;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.impression_email_dmail AS
WITH joined AS (
SELECT b.Id, b.Name AS Campaign_NM, b.Types, a.Status, a.HasResponded,
a.CreatedDate::date AS Date, a.MM_Best_Known_State AS state
FROM esp_leads.SF_MM_CAMPAIGN_MEMBER a -- each record is an event
LEFT JOIN (SELECT * FROM esp_leads.SF_MM_CAMPAIGN
where Types IN ('Email', 'Direct Mail')) b
ON a.CampaignId = b.Id
)
SELECT * FROM joined
WHERE date BETWEEN '2017-10-01' AND '2020-12-31'

------------------------------------------------------------------
-- SF and SFMC consolidation, email
DROP TABLE IF EXISTS mix_media_marketing.impression_email_final;
CREATE TABLE  IF NOT EXISTS  mix_media_marketing.impression_email_final AS
WITH sf AS (
SELECT Id, Campaign_NM AS campaign, date AS impression_date, state, count(*) AS cnt
FROM mix_media_marketing.impression_email_dmail
WHERE Types = 'Email'
GROUP BY 1,2,3,4
) ,
sfmc AS (
SELECT campaign_id AS Id, campaign_nm AS campaign, impression_date, state_cde AS state, count(*) AS cnt
FROM mix_media_marketing.impression_email_all
GROUP BY 1,2,3,4
),
joined AS (
SELECT COALESCE(b.Id, a.Id) AS Id, COALESCE(b.campaign, a.campaign) AS campaign,
COALESCE(b.impression_date, a.impression_date) AS impression_date,
COALESCE(b.state, a.state) AS state, COALESCE(b.cnt, a.cnt) AS cnt,
a.Id AS sf_id, b.id AS sfmc_id
FROM sf a
FULL OUTER JOIN sfmc b
ON upper(a.Id) = upper(b.Id)
AND a.impression_date = b.impression_date
AND upper(a.state) = upper(b.state)
)
SELECT * FROM joined
